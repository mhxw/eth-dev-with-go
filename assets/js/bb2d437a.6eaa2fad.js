"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2571],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),d=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=d(n),m=a,h=f["".concat(i,".").concat(m)]||f[m]||u[m]||c;return n?r.createElement(h,o(o({ref:t},l),{},{components:n})):r.createElement(h,o({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=f;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<c;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1746:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var r=n(7462),a=n(3366),c=(n(7294),n(3905)),o=["components"],s={description:"Tutorial on how to check if an address is a smart contract or an account with Go."},i="Address Check",d={unversionedId:"en/address-check/README",id:"en/address-check/README",title:"Address Check",description:"Tutorial on how to check if an address is a smart contract or an account with Go.",source:"@site/docs/en/address-check/README.md",sourceDirName:"en/address-check",slug:"/en/address-check/",permalink:"/eth-dev-with-go/docs/en/address-check/",editUrl:"https://github.com/mhxw/eth-dev-with-go/tree/dev/docs/en/address-check/README.md",tags:[],version:"current",frontMatter:{description:"Tutorial on how to check if an address is a smart contract or an account with Go."},sidebar:"en",previous:{title:"HD Wallet",permalink:"/eth-dev-with-go/docs/en/hd-wallet/"},next:{title:"Transactions",permalink:"/eth-dev-with-go/docs/en/transactions/"}},l={},u=[{value:"Check if Address is Valid",id:"check-if-address-is-valid",level:2},{value:"Check if Address is an Account or a Smart Contract",id:"check-if-address-is-an-account-or-a-smart-contract",level:2},{value:"Full code",id:"full-code",level:3}],f={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,c.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"address-check"},"Address Check"),(0,c.kt)("p",null,"This section will describe how to validate an address and determine if it's a smart contract address."),(0,c.kt)("h2",{id:"check-if-address-is-valid"},"Check if Address is Valid"),(0,c.kt)("p",null,"We can use a simple regular expression to check if the ethereum address is valid:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},'re := regexp.MustCompile("^0x[0-9a-fA-F]{40}$")\n\nfmt.Printf("is valid: %v\\n", re.MatchString("0x323b5d4c32345ced77393b3530b1eed0f346429d")) // is valid: true\nfmt.Printf("is valid: %v\\n", re.MatchString("0xZYXb5d4c32345ced77393b3530b1eed0f346429d")) // is valid: false\n')),(0,c.kt)("h2",{id:"check-if-address-is-an-account-or-a-smart-contract"},"Check if Address is an Account or a Smart Contract"),(0,c.kt)("p",null,"We can determine if an address is a smart contract if there's bytecode stored at that address. Here's an example where we fetch the code for a token smart contract and check the length to verify that it's a smart contract:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},'// 0x Protocol Token (ZRX) smart contract address\naddress := common.HexToAddress("0xe41d2489571d322189246dafa5ebde1f4699f498")\nbytecode, err := client.CodeAt(context.Background(), address, nil) // nil is latest block\nif err != nil {\n  log.Fatal(err)\n}\n\nisContract := len(bytecode) > 0\n\nfmt.Printf("is contract: %v\\n", isContract) // is contract: true\n')),(0,c.kt)("p",null,"When there's no bytecode at the address then we know that it's not a smart contract and it's a standard ethereum account:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},'// a random user account address\naddress := common.HexToAddress("0x8e215d06ea7ec1fdb4fc5fd21768f4b34ee92ef4")\nbytecode, err := client.CodeAt(context.Background(), address, nil) // nil is latest block\nif err != nil {\n  log.Fatal(err)\n}\n\nisContract = len(bytecode) > 0\n\nfmt.Printf("is contract: %v\\n", isContract) // is contract: false\n')),(0,c.kt)("hr",null),(0,c.kt)("h3",{id:"full-code"},"Full code"),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"https://github.com/mhxw/eth-dev-with-go/blob/main/code/address_check.go"},"address_check.go")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "regexp"\n\n    "github.com/ethereum/go-ethereum/common"\n    "github.com/ethereum/go-ethereum/ethclient"\n)\n\nfunc main() {\n    re := regexp.MustCompile("^0x[0-9a-fA-F]{40}$")\n\n    fmt.Printf("is valid: %v\\n", re.MatchString("0x323b5d4c32345ced77393b3530b1eed0f346429d")) // is valid: true\n    fmt.Printf("is valid: %v\\n", re.MatchString("0xZYXb5d4c32345ced77393b3530b1eed0f346429d")) // is valid: false\n\n    client, err := ethclient.Dial("https://cloudflare-eth.com")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // 0x Protocol Token (ZRX) smart contract address\n    address := common.HexToAddress("0xe41d2489571d322189246dafa5ebde1f4699f498")\n    bytecode, err := client.CodeAt(context.Background(), address, nil) // nil is latest block\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    isContract := len(bytecode) > 0\n\n    fmt.Printf("is contract: %v\\n", isContract) // is contract: true\n\n    // a random user account address\n    address = common.HexToAddress("0x8e215d06ea7ec1fdb4fc5fd21768f4b34ee92ef4")\n    bytecode, err = client.CodeAt(context.Background(), address, nil) // nil is latest block\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    isContract = len(bytecode) > 0\n\n    fmt.Printf("is contract: %v\\n", isContract) // is contract: false\n}\n')))}m.isMDXComponent=!0}}]);