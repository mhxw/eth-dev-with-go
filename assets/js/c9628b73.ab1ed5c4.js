"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6504],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=s(n),f=o,m=p["".concat(u,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(m,c(c({ref:t},l),{},{components:n})):r.createElement(m,c({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=p;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6942:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),c=["components"],i={description:"Tutorial on how to load an Ethereum account with Go."},u="Accounts",s={unversionedId:"en/accounts/README",id:"en/accounts/README",title:"Accounts",description:"Tutorial on how to load an Ethereum account with Go.",source:"@site/docs/en/accounts/README.md",sourceDirName:"en/accounts",slug:"/en/accounts/",permalink:"/eth-dev-with-go/docs/en/accounts/",editUrl:"https://github.com/mhxw/eth-dev-with-go/tree/dev/docs/en/accounts/README.md",tags:[],version:"current",frontMatter:{description:"Tutorial on how to load an Ethereum account with Go."},sidebar:"en",previous:{title:"Setting up the Client",permalink:"/eth-dev-with-go/docs/en/client-setup/"},next:{title:"Account Balances",permalink:"/eth-dev-with-go/docs/en/account-balance/"}},l={},d=[{value:"Full code",id:"full-code",level:3}],p={toc:d};function f(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"accounts"},"Accounts"),(0,a.kt)("p",null,"Accounts on Ethereum are either wallet addresses or smart contract addresses. They look like ",(0,a.kt)("inlineCode",{parentName:"p"},"0x71c7656ec7ab88b098defb751b7401b5f6d8976f")," and they're what you use for sending ETH to another user and also are used for referring to a smart contract on the blockchain when needing to interact with it. They are unique and are derived from a private key. We'll go more in depth into private/public key pairs in later sections."),(0,a.kt)("p",null,"In order to use account addresses with go-ethereum, you must first convert them to the go-ethereum ",(0,a.kt)("inlineCode",{parentName:"p"},"common.Address")," type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'address := common.HexToAddress("0x71c7656ec7ab88b098defb751b7401b5f6d8976f")\n\nfmt.Println(address.Hex()) // 0x71C7656EC7ab88b098defB751B7401B5f6d8976F\n')),(0,a.kt)("p",null,"Pretty much you'd use this type anywhere you'd pass an ethereum address to methods from go-ethereum. Now that you know the basics of accounts and addresses, let's learn how to retrieve the ETH account balance in the next section."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"full-code"},"Full code"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/mhxw/eth-dev-with-go/blob/main/code/address.go"},"address.go")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n\n    "github.com/ethereum/go-ethereum/common"\n)\n\nfunc main() {\n    address := common.HexToAddress("0x71c7656ec7ab88b098defb751b7401b5f6d8976f")\n\n    fmt.Println(address.Hex())        // 0x71C7656EC7ab88b098defB751B7401B5f6d8976F\n    fmt.Println(address.Hash().Hex()) // 0x00000000000000000000000071c7656ec7ab88b098defb751b7401b5f6d8976f\n    fmt.Println(address.Bytes())      // [113 199 101 110 199 171 136 176 152 222 251 117 27 116 1 181 246 216 151 111]\n}\n')))}f.isMDXComponent=!0}}]);