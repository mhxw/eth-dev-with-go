"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[46],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return h}});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=r.createContext({}),s=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},u=function(n){var e=s(n.components);return r.createElement(l.Provider,{value:e},n.children)},f={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,l=n.parentName,u=i(n,["components","mdxType","originalType","parentName"]),d=s(t),h=a,m=d["".concat(l,".").concat(h)]||d[h]||f[h]||o;return t?r.createElement(m,c(c({ref:e},u),{},{components:t})):r.createElement(m,c({ref:e},u))}));function h(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,c=new Array(o);c[0]=d;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=n,i.mdxType="string"==typeof n?n:a,c[1]=i;for(var s=2;s<o;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8715:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return f}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),c=["components"],i={description:"Tutorial on how to query transactions on the blockchain with Go."},l="Querying Transactions",s={unversionedId:"en/transaction-query/README",id:"en/transaction-query/README",title:"Querying Transactions",description:"Tutorial on how to query transactions on the blockchain with Go.",source:"@site/docs/en/transaction-query/README.md",sourceDirName:"en/transaction-query",slug:"/en/transaction-query/",permalink:"/eth-dev-with-go/docs/en/transaction-query/",editUrl:"https://github.com/mhxw/eth-dev-with-go/tree/dev/docs/en/transaction-query/README.md",tags:[],version:"current",frontMatter:{description:"Tutorial on how to query transactions on the blockchain with Go."},sidebar:"en",previous:{title:"Querying Blocks",permalink:"/eth-dev-with-go/docs/en/block-query/"},next:{title:"Transferring ETH",permalink:"/eth-dev-with-go/docs/en/transfer-eth/"}},u={},f=[{value:"Full code",id:"full-code",level:3}],d={toc:f};function h(n){var e=n.components,t=(0,a.Z)(n,c);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"querying-transactions"},"Querying Transactions"),(0,o.kt)("p",null,"In the ",(0,o.kt)("a",{parentName:"p",href:"../block-query"},"previous section")," we learned how to read a block and all its data given the block number. We can read the transactions in a block by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"Transactions")," method which returns a list of ",(0,o.kt)("inlineCode",{parentName:"p"},"Transaction")," type. It's then trivial to iterate over the collection and retrieve any information regarding the transaction."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"for _, tx := range block.Transactions() {\n  fmt.Println(tx.Hash().Hex())        // 0x5d49fcaa394c97ec8a9c3e7bd9e8388d420fb050a52083ca52ff24b3b65bc9c2\n  fmt.Println(tx.Value().String())    // 10000000000000000\n  fmt.Println(tx.Gas())               // 105000\n  fmt.Println(tx.GasPrice().Uint64()) // 102000000000\n  fmt.Println(tx.Nonce())             // 110644\n  fmt.Println(tx.Data())              // []\n  fmt.Println(tx.To().Hex())          // 0x55fE59D8Ad77035154dDd0AD0388D09Dd4047A8e\n}\n")),(0,o.kt)("p",null,"In order to read the sender address, we need to call ",(0,o.kt)("inlineCode",{parentName:"p"},"AsMessage")," on the transaction which returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"Message")," type containing a function to return the sender (from) address. The ",(0,o.kt)("inlineCode",{parentName:"p"},"AsMessage")," method requires the EIP155 signer, which we derive the chain ID from the client."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"chainID, err := client.NetworkID(context.Background())\nif err != nil {\n  log.Fatal(err)\n}\n\nif msg, err := tx.AsMessage(types.NewEIP155Signer(chainID)); err == nil {\n  fmt.Println(msg.From().Hex()) // 0x0fD081e3Bb178dc45c0cb23202069ddA57064258\n}\n")),(0,o.kt)("p",null,"Each transaction has a receipt which contains the result of the execution of the transaction, such as any return values and logs, as well as the status which will be ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," (success) or ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," (fail)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"receipt, err := client.TransactionReceipt(context.Background(), tx.Hash())\nif err != nil {\n  log.Fatal(err)\n}\n\nfmt.Println(receipt.Status) // 1\nfmt.Println(receipt.Logs) // ...\n")),(0,o.kt)("p",null,"Another way to iterate over transaction without fetching the block is to call the client's ",(0,o.kt)("inlineCode",{parentName:"p"},"TransactionInBlock")," method. This method accepts only the block hash and the index of the transaction within the block. You can call ",(0,o.kt)("inlineCode",{parentName:"p"},"TransactionCount")," to know how many transactions there are in the block."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'blockHash := common.HexToHash("0x9e8751ebb5069389b855bba72d94902cc385042661498a415979b7b6ee9ba4b9")\ncount, err := client.TransactionCount(context.Background(), blockHash)\nif err != nil {\n  log.Fatal(err)\n}\n\nfor idx := uint(0); idx < count; idx++ {\n  tx, err := client.TransactionInBlock(context.Background(), blockHash, idx)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  fmt.Println(tx.Hash().Hex()) // 0x5d49fcaa394c97ec8a9c3e7bd9e8388d420fb050a52083ca52ff24b3b65bc9c2\n}\n')),(0,o.kt)("p",null,"You can also query for a single transaction directly given the transaction hash by using ",(0,o.kt)("inlineCode",{parentName:"p"},"TransactionByHash"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'txHash := common.HexToHash("0x5d49fcaa394c97ec8a9c3e7bd9e8388d420fb050a52083ca52ff24b3b65bc9c2")\ntx, isPending, err := client.TransactionByHash(context.Background(), txHash)\nif err != nil {\n  log.Fatal(err)\n}\n\nfmt.Println(tx.Hash().Hex()) // 0x5d49fcaa394c97ec8a9c3e7bd9e8388d420fb050a52083ca52ff24b3b65bc9c2\nfmt.Println(isPending)       // false\n')),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"full-code"},"Full code"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/mhxw/eth-dev-with-go/blob/main/code/transactions.go"},"transactions.go")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "math/big"\n\n    "github.com/ethereum/go-ethereum/common"\n    "github.com/ethereum/go-ethereum/core/types"\n    "github.com/ethereum/go-ethereum/ethclient"\n)\n\nfunc main() {\n    client, err := ethclient.Dial("https://cloudflare-eth.com")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    blockNumber := big.NewInt(5671744)\n    block, err := client.BlockByNumber(context.Background(), blockNumber)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for _, tx := range block.Transactions() {\n        fmt.Println(tx.Hash().Hex())        // 0x5d49fcaa394c97ec8a9c3e7bd9e8388d420fb050a52083ca52ff24b3b65bc9c2\n        fmt.Println(tx.Value().String())    // 10000000000000000\n        fmt.Println(tx.Gas())               // 105000\n        fmt.Println(tx.GasPrice().Uint64()) // 102000000000\n        fmt.Println(tx.Nonce())             // 110644\n        fmt.Println(tx.Data())              // []\n        fmt.Println(tx.To().Hex())          // 0x55fE59D8Ad77035154dDd0AD0388D09Dd4047A8e\n\n        chainID, err := client.NetworkID(context.Background())\n        if err != nil {\n            log.Fatal(err)\n        }\n\n        if msg, err := tx.AsMessage(types.NewEIP155Signer(chainID)); err == nil {\n            fmt.Println(msg.From().Hex()) // 0x0fD081e3Bb178dc45c0cb23202069ddA57064258\n        }\n\n        receipt, err := client.TransactionReceipt(context.Background(), tx.Hash())\n        if err != nil {\n            log.Fatal(err)\n        }\n\n        fmt.Println(receipt.Status) // 1\n    }\n\n    blockHash := common.HexToHash("0x9e8751ebb5069389b855bba72d94902cc385042661498a415979b7b6ee9ba4b9")\n    count, err := client.TransactionCount(context.Background(), blockHash)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for idx := uint(0); idx < count; idx++ {\n        tx, err := client.TransactionInBlock(context.Background(), blockHash, idx)\n        if err != nil {\n            log.Fatal(err)\n        }\n\n        fmt.Println(tx.Hash().Hex()) // 0x5d49fcaa394c97ec8a9c3e7bd9e8388d420fb050a52083ca52ff24b3b65bc9c2\n    }\n\n    txHash := common.HexToHash("0x5d49fcaa394c97ec8a9c3e7bd9e8388d420fb050a52083ca52ff24b3b65bc9c2")\n    tx, isPending, err := client.TransactionByHash(context.Background(), txHash)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(tx.Hash().Hex()) // 0x5d49fcaa394c97ec8a9c3e7bd9e8388d420fb050a52083ca52ff24b3b65bc9c2\n    fmt.Println(isPending)       // false\n}\n')))}h.isMDXComponent=!0}}]);