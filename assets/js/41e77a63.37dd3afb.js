"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3538],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),h=p(t),f=i,d=h["".concat(l,".").concat(f)]||h[f]||u[f]||o;return t?r.createElement(d,a(a({ref:n},s),{},{components:t})):r.createElement(d,a({ref:n},s))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=h;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var p=2;p<o;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},4701:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],c={description:"Tutorial on how to generate whisper key pairs with Go."},l="Generating Whisper Key Pair",p={unversionedId:"en/whisper-keys/README",id:"en/whisper-keys/README",title:"Generating Whisper Key Pair",description:"Tutorial on how to generate whisper key pairs with Go.",source:"@site/docs/en/whisper-keys/README.md",sourceDirName:"en/whisper-keys",slug:"/en/whisper-keys/",permalink:"/eth-dev-with-go/docs/en/whisper-keys/",editUrl:"https://github.com/mhxw/eth-dev-with-go/tree/dev/docs/en/whisper-keys/README.md",tags:[],version:"current",frontMatter:{description:"Tutorial on how to generate whisper key pairs with Go."},sidebar:"en",previous:{title:"Connecting Whisper Client",permalink:"/eth-dev-with-go/docs/en/whisper-client/"},next:{title:"Sending Messages on Whisper",permalink:"/eth-dev-with-go/docs/en/whisper-send/"}},s={},u=[{value:"Full code",id:"full-code",level:3}],h={toc:u};function f(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"generating-whisper-key-pair"},"Generating Whisper Key Pair"),(0,o.kt)("p",null,"In whisper, messages have to be encrypted with either a symmetric or an asymmetric key to prevent them from being read by anyone other than the intended recipient."),(0,o.kt)("p",null,"After you've connected to the whisper client you'll need to call the client's ",(0,o.kt)("inlineCode",{parentName:"p"},"NewKeyPair")," method to generate a new public and private pair that the node will manage. The result of this function will be a unique ID that references the key pair which we'll be using for encrypting and decrypting the message in the next few sections."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"keyID, err := client.NewKeyPair(context.Background())\nif err != nil {\n  log.Fatal(err)\n}\n\nfmt.Println(keyID) // 0ec5cfe4e215239756054992dbc2e10f011db1cdfc88b9ba6301e2f9ea1b58d2\n")),(0,o.kt)("p",null,"Let's learn how to send an encrypted message in the ",(0,o.kt)("a",{parentName:"p",href:"../whisper-send"},"next section"),"."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"full-code"},"Full code"),(0,o.kt)("p",null,"Commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"geth --rpc --shh --ws\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/mhxw/eth-dev-with-go/blob/main/code/whisper_keypair.go"},"whisper_keypair.go")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n\n    "github.com/ethereum/go-ethereum/whisper/shhclient"\n)\n\nfunc main() {\n    client, err := shhclient.Dial("ws://127.0.0.1:8546")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    keyID, err := client.NewKeyPair(context.Background())\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(keyID) // 0ec5cfe4e215239756054992dbc2e10f011db1cdfc88b9ba6301e2f9ea1b58d2\n}\n')))}f.isMDXComponent=!0}}]);